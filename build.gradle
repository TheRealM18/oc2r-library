import org.apache.commons.io.IOUtils

plugins {
    id "idea"
    id "maven-publish"
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id 'org.spongepowered.mixin' version '0.7.+'
    id "com.modrinth.minotaur" version "2.+"
}

apply plugin: 'org.spongepowered.mixin'
apply plugin: "java"
jarJar.enable()

static def getGitRef() {
    try {
        def command = "git rev-parse --short HEAD"
        def process = command.execute()
        return process.text.trim();
    } catch (final Throwable ignored) {
        return "unknown"
    }
}

version = System.getenv('RELEASE_TYPE') == "release" ? "${semver}" : "${semver}+${getGitRef()}"
group = "com.therealm18studios.oc2rlibrary"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

tasks.withType(JavaCompile).configureEach {
    options.encoding = "utf-8"
}

final def hasGithubPackageCredentials =
    (project.hasProperty("gpr.user") && project.hasProperty("gpr.key")) ||
        (System.getenv("GITHUB_ACTOR") && System.getenv("GITHUB_TOKEN"))

repositories {
    mavenCentral()
    maven {
        url "https://cursemaven.com"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven { url = "https://proxy-maven.covers1624.net/" }
    if (hasGithubPackageCredentials) {
        final def GithubPackages = [
            ["fnuecke/ceres", "li.cil.ceres"],
            ["North-Western-Development/sedna", "li.cil.sedna"],
            ["North-Western-Development/minux", "li.cil.sedna"]
        ]
        GithubPackages.each { final repo, final group ->
            maven {
                url = uri("https://maven.pkg.github.com/${repo}")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                    password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
                }
                content { includeGroup group }
            }
        }
    }
    flatDir {
        dirs("libs")
    }

}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

    implementation fg.deobf("curse.maven:architectury-api-${architectury_project_id}:${architectury_file_id}")
    implementation fg.deobf("curse.maven:markdownmanual-${markdownmanual_project_id}:${markdownmanual_file_id}")

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-${minecraft_sdk}-api:${jei_version}")

    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-${minecraft_sdk}:${jei_version}")

    implementation fg.deobf("curse.maven:oc2r-${oc2r_project_id}:${oc2r_file_id}")

    implementation fileTree(dir: 'libs', include: ['*.jar'])

}

System.setProperty("line.separator", "\n")

tasks.register('copyLicensesToResources', Copy) {
    from "."
    into file("${layout.buildDirectory.get()}/resources/main")
    include "LICENSE*"
}

minecraft {
    mappings channel: "official", version: minecraft_version

    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        configureEach {
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"

            mods {
                oc2 {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory project.file("runclient")
            property "forge.enabledGameTestNamespaces", "oc2r-library"
        }

        server {
            workingDirectory project.file("run")
            property "forge.enabledGameTestNamespaces", "oc2r-library"
            arg "--nogui"
        }

        gameTestServer {
            workingDirectory project.file('run')
            property "forge.enabledGameTestNamespaces", "oc2r-library"
        }

        data {
            workingDirectory project.file("run")
            args "--mod", "oc2r-library", "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources")
        }
    }
}

mixin {
    add sourceSets.main, "mixins.oc2r-library.refmap.json"
    config "mixins.oc2r-library.json"

//    quiet
}

tasks.register('copyGeneratedResources', Copy) {
    from "src/generated"
    into "src/main"
    exclude "resources/.cache"
}

jar {
    finalizedBy "reobfJar"

    manifest {
        attributes([
            "Specification-Title"     : "oc2r-library",
            "Specification-Vendor"    : "TheRealM18",
            "Specification-Version"   : "1",
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : "${semver}",
            "Implementation-Vendor"   : "TheRealm18",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs"            : "mixins.oc2r-library.json",
        ])
    }
}

publish {
    dependsOn(tasks.modrinth)
    dependsOn(tasks.curseforge)
}

static def getCurseforgeSDKValue(minecraft_sdk) {
    switch(minecraft_sdk) {
        case "forge": return "Forge"
        case "fabric": return "Fabric"
        case "neoforge": return "NeoForge"
        case "quilt": return "Quilt"
        default: throw new Exception("Unrecognized minecraft SDK")
    }
}


curseforge {
    apiKey = System.getenv("CURSEFORGE_API_KEY") ?: ""

    project {
        id = curse_project_id
        releaseType = System.getenv('RELEASE_TYPE') ?: "alpha"
        changelogType = 'markdown'
        changelog = System.getenv("CHANGELOG") ?: "Changelog not available."
        addGameVersion getCurseforgeSDKValue(minecraft_sdk)
        addGameVersion minecraft_version
        addGameVersion "Java 17"
        mainArtifact "build/libs/oc2r-library-${minecraft_version}-${minecraft_sdk}-${version}.jar"
        relations {
            requiredDependency "architectury-api"
            requiredDependency "markdownmanual"
            requiredDependency "oc2r"
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = modrinth_project_id
    versionType = System.getenv('RELEASE_TYPE') ?: "alpha"
    uploadFile = "build/libs/oc2r-library-${minecraft_version}-${minecraft_sdk}-${version}.jar"
    gameVersions = [minecraft_version]
    loaders = [minecraft_sdk]
    changelog = System.getenv("CHANGELOG") ?: "Changelog not available."
    dependencies {
        required.project "architectury-api"
        required.project "markdownmanual"
        required.project "oc2r"
    }
}

idea {
    module {
        for (final String exclude in ["assets", "run", "out", "logs", "src/generated"]) {
            excludeDirs += file(exclude)
        }
    }
}

compileJava {
    options.encoding = "UTF-8"
}
